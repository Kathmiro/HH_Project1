import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from wordcloud import WordCloud
import plotly.graph_objects as go
import os
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π Habr Career",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—É—Ç–∏
@st.cache_data
def load_data():
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    script_dir = Path(__file__).parent
    data_path = script_dir.parent / "data" / "processed" / "vacancies.csv"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not data_path.exists():
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞)
        alt_path = Path("data/processed/vacancies.csv")
        if alt_path.exists():
            data_path = alt_path
            st.success(f"–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: {alt_path}")
        else:
            return pd.DataFrame()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv(data_path, encoding='utf-8-sig')

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç
    if 'published_at' in df.columns:
        df['published_at'] = pd.to_datetime(df['published_at'], errors='coerce')

    return df


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤
def generate_wordcloud(text_series, stopwords=None):
    if stopwords is None:
        stopwords = set()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å–µ—Ä–∏—é
    if text_series.empty:
        return plt.figure(figsize=(10, 5))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
    text = ' '.join([str(text) for text in text_series if isinstance(text, str)])

    if not text.strip():
        fig, ax = plt.subplots(figsize=(10, 5))
        ax.text(0.5, 0.5, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞–∫–∞ —Å–ª–æ–≤",
                horizontalalignment='center', verticalalignment='center')
        ax.axis('off')
        return fig

    # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞–∫–æ —Å–ª–æ–≤
    wordcloud = WordCloud(
        width=800,
        height=400,
        background_color='white',
        stopwords=stopwords,
        max_words=100,
        colormap='viridis',
        collocations=False
    ).generate(text)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–ª–∞–∫–æ —Å–ª–æ–≤
    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(wordcloud, interpolation='bilinear')
    ax.axis('off')
    return fig


# –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    st.title("üìä –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–π Habr Career")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = load_data()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if df.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

    # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
    cities = df['city'].dropna().unique().tolist()
    all_cities = ['–í—Å–µ –≥–æ—Ä–æ–¥–∞'] + sorted(cities)
    selected_city = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", all_cities)

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
    companies = df['company'].value_counts().head(20).index.tolist()
    top_companies = ['–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏'] + companies
    selected_company = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é", top_companies)

    # –§–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã
    remote_col = 'remote_work' if 'remote_work' in df.columns else ('remote' if 'remote' in df.columns else None)
    if remote_col:
        work_format = st.sidebar.radio(
            "–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã",
            ["–í—Å–µ", "–£–¥–∞–ª–µ–Ω–Ω–æ", "–û—Ñ–∏—Å"]
        )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = df.copy()

    if selected_city != '–í—Å–µ –≥–æ—Ä–æ–¥–∞':
        filtered_df = filtered_df[filtered_df['city'] == selected_city]

    if selected_company != '–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏':
        filtered_df = filtered_df[filtered_df['company'] == selected_company]

    if remote_col and work_format != '–í—Å–µ':
        if work_format == '–£–¥–∞–ª–µ–Ω–Ω–æ':
            filtered_df = filtered_df[filtered_df[remote_col] == True]
        else:
            filtered_df = filtered_df[filtered_df[remote_col] == False]

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    st.header("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π", filtered_df.shape[0])
    with col2:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π", filtered_df['company'].nunique())
    with col3:
        if 'salary_rub' in filtered_df.columns:
            salary_data = filtered_df[filtered_df['salary_rub'].notnull()]
            if not salary_data.empty:
                avg_salary = salary_data['salary_rub'].mean()
                st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)", f"{avg_salary:,.0f}")
            else:
                st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –¥–∞—à–±–æ—Ä–¥–∞
    tab1, tab2, tab3, tab4 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–ê–Ω–∞–ª–∏–∑", "–ù–∞–≤—ã–∫–∏", "–û—Ç—á–µ—Ç"])

    # –í–∫–ª–∞–¥–∫–∞ "–î–∞–Ω–Ω—ã–µ"
    with tab1:
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")

        # –í—ã–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        all_columns = df.columns.tolist()
        default_columns = ['title', 'company', 'city', 'remote' if 'remote' in all_columns else 'remote_work',
                           'salary_rub', 'seniority_level']
        default_columns = [col for col in default_columns if col in all_columns]

        selected_columns = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            all_columns,
            default=default_columns
        )

        if selected_columns:
            st.dataframe(filtered_df[selected_columns], height=400)
        else:
            st.dataframe(filtered_df, height=400)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        st.subheader("–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        missing_values = filtered_df.isnull().sum()
        missing_df = pd.DataFrame({
            '–ö–æ–ª–æ–Ω–∫–∞': missing_values.index,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö': missing_values.values,
            '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö': (missing_values / len(filtered_df) * 100).values
        })
        missing_df = missing_df[missing_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö'] > 0].sort_values('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö',
                                                                                      ascending=False)

        if not missing_df.empty:
            st.dataframe(missing_df)

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            fig = px.bar(
                missing_df.head(10),  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-10 –∫–æ–ª–æ–Ω–æ–∫ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
                x='–ö–æ–ª–æ–Ω–∫–∞',
                y='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö',
                title='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º',
                color='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö',
                color_continuous_scale='Viridis'
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")

    # –í–∫–ª–∞–¥–∫–∞ "–ê–Ω–∞–ª–∏–∑"
    with tab2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π")

        col1, col2 = st.columns(2)

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        with col1:
            if selected_city == '–í—Å–µ –≥–æ—Ä–æ–¥–∞' and filtered_df['city'].nunique() > 1:
                city_counts = filtered_df['city'].value_counts().head(10)
                fig = px.bar(
                    x=city_counts.index,
                    y=city_counts.values,
                    labels={'x': '–ì–æ—Ä–æ–¥', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'},
                    title='–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π',
                    color=city_counts.values,
                    color_continuous_scale='Viridis'
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–í—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
        with col2:
            if selected_company == '–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏' and filtered_df['company'].nunique() > 1:
                company_counts = filtered_df['company'].value_counts().head(10)
                fig = px.bar(
                    x=company_counts.index,
                    y=company_counts.values,
                    labels={'x': '–ö–æ–º–ø–∞–Ω–∏—è', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'},
                    title='–¢–æ–ø –∫–æ–º–ø–∞–Ω–∏–π-—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π',
                    color=company_counts.values,
                    color_continuous_scale='Plasma'
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")

        # –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç
        if 'salary_rub' in filtered_df.columns:
            st.subheader("–ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç")

            salary_data = filtered_df[filtered_df['salary_rub'].notnull()]

            if not salary_data.empty and len(salary_data) >= 3:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                col1, col2 = st.columns(2)

                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç
                with col1:
                    fig = px.histogram(
                        salary_data,
                        x='salary_rub',
                        nbins=20,
                        labels={'salary_rub': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'},
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç',
                        color_discrete_sequence=['#2d8a8a']
                    )

                    fig.add_vline(
                        x=salary_data['salary_rub'].median(),
                        line_dash="dash",
                        line_color="red",
                        annotation_text=f"–ú–µ–¥–∏–∞–Ω–∞: {salary_data['salary_rub'].median():,.0f}‚ÇΩ"
                    )

                    fig.add_vline(
                        x=salary_data['salary_rub'].mean(),
                        line_dash="dash",
                        line_color="green",
                        annotation_text=f"–°—Ä–µ–¥–Ω–µ–µ: {salary_data['salary_rub'].mean():,.0f}‚ÇΩ"
                    )

                    st.plotly_chart(fig, use_container_width=True)

                # –Ø—â–∏–∫ —Å —É—Å–∞–º–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º
                with col2:
                    if selected_city == '–í—Å–µ –≥–æ—Ä–æ–¥–∞' and filtered_df['city'].nunique() > 1:
                        top_cities = filtered_df['city'].value_counts().head(5).index.tolist()
                        city_salary_data = filtered_df[
                            filtered_df['city'].isin(top_cities) & filtered_df['salary_rub'].notnull()]

                        if not city_salary_data.empty and len(city_salary_data) >= 3:
                            fig = px.box(
                                city_salary_data,
                                x='city',
                                y='salary_rub',
                                labels={'city': '–ì–æ—Ä–æ–¥', 'salary_rub': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'},
                                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º',
                                color='city',
                                color_discrete_sequence=px.colors.qualitative.Dark2
                            )
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –≥–æ—Ä–æ–¥–∞–º")
                    else:
                        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
                        if 'seniority_level' in filtered_df.columns:
                            seniority_salary_data = filtered_df[
                                filtered_df['seniority_level'].notnull() & filtered_df['salary_rub'].notnull()]

                            if not seniority_salary_data.empty and len(seniority_salary_data) >= 3:
                                fig = px.box(
                                    seniority_salary_data,
                                    x='seniority_level',
                                    y='salary_rub',
                                    labels={'seniority_level': '–£—Ä–æ–≤–µ–Ω—å', 'salary_rub': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'},
                                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
                                    color='seniority_level',
                                    color_discrete_sequence=px.colors.qualitative.Set2
                                )
                                st.plotly_chart(fig, use_container_width=True)
                            else:
                                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")

                # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if 'salary_category' in filtered_df.columns:
                    salary_cat_data = filtered_df[filtered_df['salary_category'].notnull()]
                    if not salary_cat_data.empty:
                        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ä–ø–ª–∞—Ç
                        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ä–ø–ª–∞—Ç")
                        cat_counts = salary_cat_data['salary_category'].value_counts().reindex([
                            '–¥–æ 100K', '100K-200K', '200K-300K', '300K-500K', '–æ—Ç 500K'
                        ])

                        # –£–±–∏—Ä–∞–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è
                        cat_counts = cat_counts.dropna()

                        if not cat_counts.empty:
                            fig = px.bar(
                                x=cat_counts.index,
                                y=cat_counts.values,
                                labels={'x': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã', 'y': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π'},
                                title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞—Ä–ø–ª–∞—Ç',
                                color=cat_counts.values,
                                color_continuous_scale='Viridis'
                            )
                            st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π")

        # –ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        if remote_col:
            st.subheader("–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã")

            remote_counts = filtered_df[remote_col].value_counts().reset_index()
            if not remote_counts.empty:
                remote_counts.columns = ['–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                remote_counts['–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'] = remote_counts['–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞'].map(
                    {True: '–£–¥–∞–ª–µ–Ω–Ω–æ', False: '–û—Ñ–∏—Å'})

                fig = px.pie(
                    remote_counts,
                    values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    names='–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–∞–±–æ—Ç—ã',
                    color_discrete_sequence=px.colors.qualitative.Set2,
                    hole=0.3
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                fig.update_traces(textposition='inside', textinfo='percent+label')
                st.plotly_chart(fig, use_container_width=True)

    # –í–∫–ª–∞–¥–∫–∞ "–ù–∞–≤—ã–∫–∏"
    with tab3:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤")

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        all_skills = []
        for skills in filtered_df['skills'].dropna():
            if isinstance(skills, str) and skills:
                all_skills.extend([skill.strip() for skill in skills.split(',') if skill.strip()])

        if all_skills:
            skills_freq = pd.Series(all_skills).value_counts()

            col1, col2 = st.columns(2)

            # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
            with col1:
                top_skills = skills_freq.head(15)
                fig = px.bar(
                    x=top_skills.values,
                    y=top_skills.index,
                    orientation='h',
                    labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π', 'y': '–ù–∞–≤—ã–∫'},
                    title='–¢–æ–ø-15 –Ω–∞–∏–±–æ–ª–µ–µ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
                    color=top_skills.values,
                    color_continuous_scale='Viridis'
                )
                fig.update_layout(yaxis={'categoryorder': 'total ascending'})
                st.plotly_chart(fig, use_container_width=True)

            # –û–±–ª–∞–∫–æ –Ω–∞–≤—ã–∫–æ–≤
            with col2:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±–ª–∞–∫–∞
                stopwords = set(['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–∫', '–∑–∞', '–∏–∑', '—É'])
                wordcloud_fig = generate_wordcloud(pd.Series(all_skills), stopwords=stopwords)
                st.pyplot(wordcloud_fig)

            # –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–≤—ã–∫–æ–≤ –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π
            if 'skills_count' in filtered_df.columns and 'salary_rub' in filtered_df.columns:
                st.subheader("–ù–∞–≤—ã–∫–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã")

                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —É–±–∏—Ä–∞—è NaN –∑–Ω–∞—á–µ–Ω–∏—è
                scatter_data = filtered_df[
                    filtered_df['salary_rub'].notnull() &
                    filtered_df['skills_count'].notnull()
                    ]

                if not scatter_data.empty and len(scatter_data) >= 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è scatter plot
                    scatter_kwargs = {
                        'x': 'skills_count',
                        'y': 'salary_rub',
                        'trendline': 'ols',
                        'labels': {
                            'skills_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≤—ã–∫–æ–≤',
                            'salary_rub': '–ó–∞—Ä–ø–ª–∞—Ç–∞ (‚ÇΩ)'
                        },
                        'title': '–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤',
                        'hover_data': ['company', 'title']
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                    if 'seniority_level' in scatter_data.columns and scatter_data['seniority_level'].notnull().any():
                        scatter_kwargs['color'] = 'seniority_level'

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–æ—á–µ–∫ –ø–æ –æ–ø—ã—Ç—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç NaN –∑–Ω–∞—á–µ–Ω–∏–π
                    if 'experience_years' in scatter_data.columns:
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ NaN –≤ experience_years
                        exp_data = scatter_data.dropna(subset=['experience_years'])
                        if not exp_data.empty and len(exp_data) >= 5:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ NaN –≤ experience_years
                            scatter_data = exp_data
                            scatter_kwargs['size'] = 'experience_years'
                            scatter_kwargs['size_max'] = 15

                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                    fig = px.scatter(scatter_data, **scatter_kwargs)
                    st.plotly_chart(fig, use_container_width=True)

                    # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                    corr = scatter_data[['skills_count', 'salary_rub']].corr().iloc[0, 1]
                    corr_text = "—Å–∏–ª—å–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr > 0.7 else \
                        "—É–º–µ—Ä–µ–Ω–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr > 0.3 else \
                            "—Å–ª–∞–±–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr > 0 else \
                                "—Å–ª–∞–±–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è" if corr > -0.3 else \
                                    "—É–º–µ—Ä–µ–Ω–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è" if corr > -0.7 else "—Å–∏–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"

                    st.info(f"–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–≤—ã–∫–æ–≤ –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π: {corr:.2f} ({corr_text})")
                else:
                    st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏ –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π")

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if 'seniority_level' in filtered_df.columns:
                st.subheader("–ù–∞–≤—ã–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ–ª–∂–Ω–æ—Å—Ç–∏")

                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                skill_by_level = {}
                for level in filtered_df['seniority_level'].dropna().unique():
                    level_skills = []
                    for skills in filtered_df[filtered_df['seniority_level'] == level]['skills'].dropna():
                        if isinstance(skills, str) and skills:
                            level_skills.extend([skill.strip() for skill in skills.split(',') if skill.strip()])

                    if level_skills:
                        skill_by_level[level] = pd.Series(level_skills).value_counts().head(10)

                if skill_by_level:
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    level_cols = st.columns(min(len(skill_by_level), 3))

                    for i, (level, skills) in enumerate(skill_by_level.items()):
                        col_idx = i % len(level_cols)
                        with level_cols[col_idx]:
                            fig = px.bar(
                                x=skills.values,
                                y=skills.index,
                                orientation='h',
                                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'y': '–ù–∞–≤—ã–∫'},
                                title=f'–¢–æ–ø –Ω–∞–≤—ã–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è {level}',
                                color=skills.values,
                                color_continuous_scale='Plasma'
                            )
                            fig.update_layout(height=350, yaxis={'categoryorder': 'total ascending'})
                            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–≤—ã–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    # –í–∫–ª–∞–¥–∫–∞ "–û—Ç—á–µ—Ç"
    with tab4:
        st.subheader("–ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã")

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        st.markdown(f"""
        ### –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã:

        1. **–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π:** {filtered_df.shape[0]}
        2. **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π:** {filtered_df['company'].nunique()}
        3. **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π:** {filtered_df['city'].nunique()}
        """)

        # –ó–∞—Ä–ø–ª–∞—Ç—ã
        if 'salary_rub' in filtered_df.columns:
            salary_data = filtered_df[filtered_df['salary_rub'].notnull()]
            if not salary_data.empty:
                st.markdown(f"""
                ### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—Ä–ø–ª–∞—Ç:

                - **–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary_data['salary_rub'].mean():,.0f} ‚ÇΩ
                - **–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary_data['salary_rub'].median():,.0f} ‚ÇΩ
                - **–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary_data['salary_rub'].min():,.0f} ‚ÇΩ
                - **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary_data['salary_rub'].max():,.0f} ‚ÇΩ
                """)

        # –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã
        if remote_col:
            remote_pct = filtered_df[remote_col].mean() * 100
            st.markdown(f"""
            ### –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã:

            - **–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:** {remote_pct:.1f}% –≤–∞–∫–∞–Ω—Å–∏–π
            - **–û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞:** {100 - remote_pct:.1f}% –≤–∞–∫–∞–Ω—Å–∏–π
            """)

        # –¢–æ–ø –Ω–∞–≤—ã–∫–æ–≤
        if all_skills:
            st.markdown("### –¢–æ–ø-10 –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:")

            top_skills = pd.Series(all_skills).value_counts().head(10)
            skills_md = ""
            for i, (skill, count) in enumerate(top_skills.items(), 1):
                skills_md += f"{i}. **{skill}:** {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"

            st.markdown(skills_md)

        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
        if 'skills_count' in filtered_df.columns and 'salary_rub' in filtered_df.columns:
            corr_data = filtered_df[filtered_df['skills_count'].notnull() & filtered_df['salary_rub'].notnull()]
            if not corr_data.empty and len(corr_data) >= 5:
                corr = corr_data[['skills_count', 'salary_rub']].corr().iloc[0, 1]
                st.markdown(f"""
                ### –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–∏:

                - **–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–∞–≤—ã–∫–æ–≤ –∏ –∑–∞—Ä–ø–ª–∞—Ç–æ–π:** {corr:.2f}
                """)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã
        st.subheader("–í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        st.markdown("""
        ### –í—ã–≤–æ–¥—ã:

        1. **–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è:** –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –∫—Ä—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö, —Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º –≤ –ú–æ—Å–∫–≤–µ –∏ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ, —á—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞ –≤ –†–æ—Å—Å–∏–∏.

        2. **–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:** –ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π, —á—Ç–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–π –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º —Å–µ–∫—Ç–æ—Ä–µ.

        3. **–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–Ω–∞—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è:** –î–∞–Ω–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞–≤—ã–∫–æ–≤ —Å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º Python –∏ SQL, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏—Ö –±–∞–∑–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Å—Ñ–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

        4. **–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:** –ê–Ω–∞–ª–∏–∑ –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—è–≤–ª—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—É—é –∞—Å–∏–º–º–µ—Ç—Ä–∏—é —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–Ω–µ–º —Å–µ–≥–º–µ–Ω—Ç–µ –∏ –Ω–∞–ª–∏—á–∏–µ–º –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π.

        ### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

        1. **–î–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:** –°—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ (Python, SQL) —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö (PostgreSQL, Docker, Git), –ø–æ–≤—ã—à–∞—é—â–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.

        2. **–î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π:** –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞—è –≥–∏–±–∫–∏–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—É–ª–∞ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ —Å–Ω–∏–∂–µ–Ω–∏—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞–π–º–∞.

        3. **–î–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π:** –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–±–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–æ–≤ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –º—ã—à–ª–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–º –æ–ø—ã—Ç–æ–º, –æ—Ç—Ä–∞–∂–∞—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏.

        4. **–î–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π —Ä—ã–Ω–∫–∞:** –†–∞—Å—à–∏—Ä–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é –±–∞–∑—É —á–µ—Ä–µ–∑ –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Ä–µ–∫—Ä—É—Ç–∏–Ω–≥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ —Ç—Ä—É–¥–∞.
        """)


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()